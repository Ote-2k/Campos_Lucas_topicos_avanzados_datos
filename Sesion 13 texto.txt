/*
Crea un procedimiento actualizar_inventario_pedido que reciba un PedidoID (parámetro IN) y reduzca la cantidad de productos en una tabla Inventario (crea la tabla si no existe) según los detalles del pedido. Usa savepoints para manejar errores si no hay suficiente inventario.
*/

CREATE TABLE Inventario(
	ProductoID NUMBER,
	Nombre VARCHAR2(50),
	Cantidad NUMBER,
	CONSTRAINT fk_producto_cliente FOREIGN KEY (ProductoID) REFERENCES Productos(ProductoID)
);

CREATE OR REPLACE PROCEDURE actualizar_inventario_pedido(
	i_pedido_id IN NUMBER,
	i_detalle_id IN NUMBER,
	i_producto_id IN NUMBER,
	i_cantidad IN NUMBER
) AS
BEGIN
	-- Insertar primer detalle
	INSERT INTO DetallesPedidos (DetalleID, PedidoID, ProductoID, Cantidad)
	VALUES (i_detalle_id, i_pedido_id, i_producto_id, i_cantidad);
	DBMS_OUTPUT.PUT_LINE('Detalle insertado.');

	-- Primer savepoint después del primer detalle
	SAVEPOINT detalle_insertado;

	-- Calcular y actualizar stock
	UPDATE Inventario
	SET Cantidad = (SELECT SUM(p.Precio * d.Cantidad)
		FROM DetallesPedidos d JOIN Productos p ON d.ProductoID = p.ProductoID
		WHERE d.PedidoID = p_pedido_id)
	WHERE PedidoID = p_pedido_id;

	-- Confirmar toda la transacción
	COMMIT;
	DBMS_OUTPUT.PUT_LINE('Transacción completada y confirmada.');
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
	DBMS_OUTPUT.PUT_LINE('Error: DetalleID duplicado.');
	ROLLBACK TO detalle1_insertado;
	DBMS_OUTPUT.PUT_LINE('Rollback al primer detalle. Segundo detalle no insertado.');
	COMMIT; -- Confirmar lo que se hizo hasta el primer
detalle
	WHEN OTHERS THEN
	DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
	ROLLBACK TO pedido_insertado;
	DBMS_OUTPUT.PUT_LINE('Rollback al pedido. Detalles no insertados.');
	COMMIT; -- Confirmar solo el pedido
END;
/
-- Ejecutar
EXEC actualizar_inventario_pedido(107, 3, 5, 1, 1, 5, 2, 2);
EXEC actualizar_inventario_pedido(108, 3, 6, 1, 1, 7, 2, 2);
SELECT * FROM Pedidos WHERE PedidoID = 107;
SELECT * FROM DetallesPedidos WHERE PedidoID = 107;

/*
Diseña una tabla de hechos Fact_Pedidos y una dimensión Dim_Ciudad para un Data Warehouse basado en curso_topicos. Escribe una consulta analítica que muestre el total de ventas por ciudad y año
*/
--dimensiones

-- Dimensión ciudad
CREATE TABLE Dim_Ciudad (
	ProductoID NUMBER PRIMARY KEY,
	Nombre VARCHAR2(50),
	Precio NUMBER
);
INSERT INTO Dim_Producto
SELECT ProductoID, Nombre, Precio FROM Productos;

-- Dimensión Tiempo (simplificada)
CREATE TABLE Dim_Tiempo (
	FechaID NUMBER PRIMARY KEY,
	Fecha DATE,
	Año NUMBER,
	Mes NUMBER,
	Día NUMBER
);

INSERT INTO Dim_Tiempo (FechaID, Fecha, Año, Mes, Día)
SELECT ROWNUM, FechaPedido, EXTRACT(YEAR FROM FechaPedido), EXTRACT(MONTH FROM FechaPedido), EXTRACT(DAY FROM FechaPedido)
FROM (SELECT DISTINCT FechaPedido FROM Pedidos);

--tabla factos
CREATE TABLE Fact_Pedidos(
	VentaID NUMBER PRIMARY KEY,
	PedidoID NUMBER,
	ClienteID NUMBER,
	ProductoID NUMBER,
	FechaID NUMBER,
	Cantidad NUMBER,
	Total NUMBER,
	CONSTRAINT fk_venta_cliente FOREIGN KEY (ClienteID) REFERENCES Dim_Cliente(ClienteID),
	CONSTRAINT fk_venta_producto FOREIGN KEY (ProductoID) REFERENCES Dim_Producto(ProductoID),
	CONSTRAINT fk_venta_tiempo FOREIGN KEY (FechaID) REFERENCES Dim_Tiempo(FechaID)
);

INSERT INTO Fact_Ventas (VentaID, PedidoID, ClienteID, ProductoID, FechaID, Cantidad, Total)
SELECT ROWNUM, d.PedidoID, p.ClienteID, d.ProductoID, t.FechaID, d.Cantidad, (pr.Precio * d.Cantidad)
FROM DetallesPedidos d
JOIN Pedidos p ON d.PedidoID = p.PedidoID
JOIN Productos pr ON d.ProductoID = pr.ProductoID
JOIN Dim_Tiempo t ON p.FechaPedido = t.Fecha;

--consultas analiticas
-- Total de ventas por cliente y mes
SELECT c.Nombre, t.Mes, t.Año, SUM(f.Total) AS TotalVentas
FROM Fact_Ventas f
JOIN Dim_Cliente c ON f.ClienteID = c.ClienteID
JOIN Dim_Tiempo t ON f.FechaID = t.FechaID
GROUP BY c.Nombre, t.Mes, t.Año;